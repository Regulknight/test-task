package com.haulmont.testtask.dao;

import java.sql.*;

/**
 * Created by zelh on 18.06.17.
 */
public class DBConnector {private static volatile DBConnector dbConnector;
    private Connection c;
    private Statement st;

    static Connection getInstance(){
        if (dbConnector == null){
            dbConnector = new DBConnector();
        }
        return dbConnector.c;
    }

    private void initDB() throws SQLException {
        st.execute("CREATE TABLE IF NOT EXISTS PUBLIC.GENRE(" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "+
                "NAME VARCHAR(30) NOT NULL" +
                ")");
        st.execute("CREATE TABLE if NOT EXISTS PUBLIC.AUTHOR(" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "+
                "FNAME VARCHAR(30) NOT NULL, " +
                "LNAME VARCHAR(30) NOT NULL, " +
                "PATRON VARCHAR(30)" +
                ")");
        st.execute("CREATE TABLE if NOT EXISTS PUBLIC.BOOK(" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, " +
                "NAME VARCHAR(30) NOT NULL, " +
                "BYEAR DATE NOT NULL, " +
                "CITY VARCHAR(30) NOT NULL, " +
                "AUTHOR BIGINT NOT NULL, " +
                "GENRE BIGINT NOT NULL, " +
                "PUBLISHER VARCHAR(30) NOT NULL, " +
                "CONSTRAINT FOREIGN_KEY_FOR_AUTHOR FOREIGN KEY(AUTHOR) REFERENCES PUBLIC.AUTHOR(ID), " +
                "CONSTRAINT FOREIGN_KEY_FOR_GENRE FOREIGN KEY(GENRE) REFERENCES PUBLIC.GENRE(ID)" +
                ")");
    }

    private void fillDB() throws SQLException {
        st.execute("INSERT INTO PUBLIC.GENRE(NAME) VALUES ('ACTION')");
        st.execute("INSERT INTO PUBLIC.AUTHOR(FNAME, LNAME, PATRON) VALUES ('GARRY', 'WAYNE', '')");
        st.execute("INSERT INTO PUBLIC.BOOK(NAME, BYEAR, CITY, AUTHOR, GENRE, PUBLISHER) VALUES ('SOME', DATE '2008-08-13'," +
                "'SAMARA', 0, 0, 'MOSCOW')");
    }

    public DBConnector(){
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            c = DriverManager.getConnection("jdbc:hsqldb:file:testdb", "SA", "");
            st = c.createStatement();
            initDB();
            fillDB();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    public static void main(String[] args){
        ResultSet res = null;
        try {
            Statement st = getInstance().createStatement();
            res = st.executeQuery("SELECT * FROM PUBLIC.BOOK");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            while (res.next()){
                System.out.println(res.getString("NAME"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


